"use strict";function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function _createClass(e,n,t){return n&&_defineProperties(e.prototype,n),t&&_defineProperties(e,t),e}var splitByMediaQuery=require("./splitByMediaQuery");module.exports=function(){function e(n){_classCallCheck(this,e);var t=n||{},a=t.media,i=void 0===a?{}:a,r=t.splitTablet;this.options={media:{mobileEnd:i.mobileEnd||568,tabletPortraitStart:i.mobileEnd?i.mobileEnd+1:569,tabletPortraitEnd:i.tabletPortraitEnd||768,tabletLandscapeStart:i.tabletPortraitEnd?i.tabletPortraitEnd+1:769,tabletLandscapeEnd:i.tabletLandscapeEnd||1024,desktopStart:i.tabletLandscapeEnd?i.tabletLandscapeEnd+1:1025},splitTablet:!1!==r}}return _createClass(e,[{key:"apply",value:function(e){var n=this.options,t=n.media,a=n.splitTablet;e.hooks.thisCompilation.tap("media-query-splitting-plugin",function(e){e.mainTemplate.hooks.requireEnsure.tap("media-query-splitting-plugin",function(e,n,i){if(/mini-css-extract-plugin CSS loading/.test(e)){var r='\n            // matchMedia polyfill\n            window.matchMedia||(window.matchMedia=function(){"use strict";var e=window.styleMedia||window.media;if(!e){var t,d=document.createElement("style"),i=document.getElementsByTagName("script")[0];d.type="text/css",d.id="matchmediajs-test",i?i.parentNode.insertBefore(d,i):document.head.appendChild(d),t="getComputedStyle"in window&&window.getComputedStyle(d,null)||d.currentStyle,e={matchMedium:function(e){var i="@media "+e+"{ #matchmediajs-test { width: 1px; } }";return d.styleSheet?d.styleSheet.cssText=i:d.textContent=i,"1px"===t.width}}}return function(t){return{matches:e.matchMedium(t||"all"),media:t||"all"}}}());\n            \n            // Define current mediaType\n            var getMediaType = function() {\n              return {\n                isMobile: window.matchMedia(\'(max-width: '.concat(t.mobileEnd,"px)').matches,\n                isTabletPortrait: window.matchMedia('(min-width: ").concat(t.tabletPortraitStart,"px) and (max-width: ").concat(t.tabletPortraitEnd,"px)').matches,\n                isTabletLandscape: window.matchMedia('(min-width: ").concat(t.tabletLandscapeStart,"px) and (max-width: ").concat(t.tabletLandscapeEnd,"px)').matches,\n                isDesktop: window.matchMedia('(min-width: ").concat(t.desktopStart,"px)').matches,\n              }\n            };\n\n            var mediaType                = getMediaType();\n            var currentMediaType         = 'desktop';\n\n            if (mediaType.isMobile) {\n              currentMediaType           = 'mobile'\n            }\n            ").concat(a?"\n                else if (mediaType.isTabletPortrait) {\n                  currentMediaType       = 'tabletPortrait'\n                }\n                else if (mediaType.isTabletLandscape) {\n                  currentMediaType       = 'tabletLandscape'\n                }":"\n                else if (mediaType.isTabletPortrait || mediaType.isTabletLandscape) {\n                  currentMediaType       = 'tablet'\n                }\n              ","\n\n            var tryAppendNewMedia = function() {\n              var linkElements           = document.getElementsByTagName('link');\n              var chunkIds               = {};\n              \n              for (var i = 0; i < linkElements.length; i++) {\n                var chunkHref            = linkElements[i].href.replace(/.*\\//, '');\n                \n                if (/(mobile|tablet|desktop).*\\.css$/.test(chunkHref)) {\n                  var chunkId            = chunkHref.replace(/\\..*/, '');\n                  var chunkMediaType     = chunkHref.replace(chunkId + '.', '').replace(/\\..*/, '');\n                  var chunkHash          = chunkHref.replace(/\\.css$/, '').replace('' + chunkId + '.' + chunkMediaType + '.', '');\n                  var chunkHrefPrefix    = linkElements[i].href.replace('' + chunkId + '.' + chunkMediaType + '.' + chunkHash + '.css', '');\n  \n                  if (!chunkIds[chunkId]) {\n                    chunkIds[chunkId]    = {\n                      mediaTypes: [ chunkMediaType ],\n                      hash: chunkHash,\n                      prefix: chunkHrefPrefix,\n                    }\n                  }\n                  else {\n                    chunkIds[chunkId].mediaTypes.push(chunkMediaType);\n                  }\n                }\n              }\n\n              for (var i in chunkIds) {\n                if (chunkIds.hasOwnProperty(i)) {\n                  var isTablet           = /tablet/.test(currentMediaType);\n                  var hasTablet          = chunkIds[i].mediaTypes.indexOf('tablet') !== -1;\n                  var _hasCurrentMedia   = chunkIds[i].mediaTypes.indexOf(currentMediaType) !== -1;\n                  var hasCurrentMedia    = isTablet ? hasTablet || _hasCurrentMedia : _hasCurrentMedia;\n                  \n                  if (!hasCurrentMedia) {\n                    var fullhref         = '' + chunkIds[i].prefix + '' + i + '.' + currentMediaType + '.' + chunkIds[i].hash + '.css';\n                    var linkTag          = document.createElement('link');\n                    var header           = document.getElementsByTagName('head')[0];\n\n                    linkTag.rel          = 'stylesheet';\n                    linkTag.type         = 'text/css';\n                    linkTag.href         = fullhref;\n\n                    header.appendChild(linkTag);\n                  }\n                }\n              }\n            };\n\n            var resize = function() {\n              var newMediaType\n              var mediaType              = getMediaType();\n\n              if (mediaType.isMobile) {\n                newMediaType             = 'mobile'\n              }\n              ").concat(a?"\n                  else if (mediaType.isTabletPortrait) {\n                    newMediaType         = 'tabletPortrait'\n                  }\n                  else if (mediaType.isTabletLandscape) {\n                    newMediaType         = 'tabletLandscape'\n                  }":"else if (mediaType.isTabletPortrait || mediaType.isTabletLandscape) {\n                    newMediaType         = 'tablet'\n                  }","\n              else {\n                newMediaType             = 'desktop'\n              }\n\n              if (currentMediaType !== newMediaType) {\n                currentMediaType         = newMediaType;\n              }\n              \n              tryAppendNewMedia()\n            };\n\n            document.addEventListener('DOMContentLoaded', function() {\n              window.addEventListener('resize', resize);\n              resize();\n            });\n          ");return e.replace("promises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {","".concat(r).concat("promises.push(installedCssChunks[chunkId] = Promise.all([ 'common', currentMediaType ]\n            .map((mediaType) => new Promise(function(resolve, reject) {\n              \n              // Don't load tabletPortrait or tabletLandscape if there is tablet style\n              if (/tablet/.test(mediaType)) {\n                var linkElements         = document.getElementsByTagName('link');\n                var hasTabletStyle       = false;\n\n                for (var i = 0; i < linkElements.length; i++) {\n                  var chunkHref          = linkElements[i].href.replace(/.*\\//, '');\n                  var currentChunkRegExp = new RegExp('^' + chunkId + '\\\\' + '.tablet' + '\\\\' + '.') \n                  \n                  if (currentChunkRegExp.test(chunkHref)) {\n                    mediaType            = 'tablet';\n                    break;\n                  }\n                }\n              }\n          ")).replace('var href = "" + chunkId + "." + ','var href = "" + chunkId + (mediaType !== "common" ? "."  + mediaType : "") + "." +').replace(/head\.appendChild\(linkTag\);(.|\n)*}\)\.then/,"head.appendChild(linkTag);resize();\n})\n)).then")}throw new Error("No chunk loading found! Use mini-css-extract-plugin v0.4.3 to handle this error")})}),e.plugin("emit",function(e,n){Object.keys(e.assets).filter(function(e){return/\.css$/.test(e)}).forEach(function(n){var i=e.assets[n].children[0]._value,r=splitByMediaQuery({cssFile:i,mediaOptions:t}),d=n.replace(/\.css$/,"").replace(/.*\./,""),s=n.replace(/\..*/,"");Object.keys(r).forEach(function(t){var i=r[t];if(a||!/tablet(Portrait|Landscape)/.test(t)){var c="common"===t?n:"".concat(s,".").concat(t,".").concat(d,".css");e.assets[c]={size:function(){return Buffer.byteLength(i,"utf8")},source:function(){return new Buffer(i)}}}})}),n()})}}]),e}();